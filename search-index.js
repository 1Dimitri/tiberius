var searchIndex = JSON.parse('{\
"tiberius":{"doc":"An asynchronous, runtime-independent, pure-rust Tabular …","i":[[0,"error","tiberius","Error module",null,null],[3,"TokenError","tiberius::error","An error token returned from the server.",null,null],[4,"IoErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",0,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",0,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",0,null],[13,"ConnectionReset","","The connection was reset by the remote server.",0,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote …",0,null],[13,"NotConnected","","The network operation failed because it was not connected …",0,null],[13,"AddrInUse","","A socket address could not be bound because the address …",0,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested …",0,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",0,null],[13,"AlreadyExists","","An entity already exists, often a file.",0,null],[13,"WouldBlock","","The operation needs to block to complete, but the …",0,null],[13,"InvalidInput","","A parameter was incorrect.",0,null],[13,"InvalidData","","Data not valid for the operation were encountered.",0,null],[13,"TimedOut","","The I/O operation\'s timeout expired, causing it to be …",0,null],[13,"WriteZero","","An error returned when an operation could not be …",0,null],[13,"Interrupted","","This operation was interrupted.",0,null],[13,"Other","","Any I/O error not part of this list.",0,null],[13,"UnexpectedEof","","An error returned when an operation could not be …",0,null],[4,"Error","","A unified error enum that contains several errors that …",null,null],[13,"Io","","An error occured when performing I/O to the server.",1,null],[12,"kind","tiberius::error::Error","A list specifying general categories of I/O error.",2,null],[12,"message","","The error description.",2,null],[13,"Protocol","tiberius::error","An error happened during the request or response parsing.",1,null],[13,"Encoding","","Server responded with encoding not supported.",1,null],[13,"Conversion","","Conversion failure from one type to another.",1,null],[13,"Utf8","","Tried to convert data to UTF-8 that was not valid.",1,null],[13,"Utf16","","Tried to convert data to UTF-16 that was not valid.",1,null],[13,"ParseInt","","Tried to parse an integer that was not an integer.",1,null],[13,"Server","","An error returned by the server.",1,null],[13,"Tls","","An error in the TLS handshake.",1,null],[13,"Gssapi","","An error from the GSSAPI library.",1,null],[13,"Routing","","Server requested a connection to an alternative address.",1,null],[12,"host","tiberius::error::Error","The requested hostname",3,null],[12,"port","","The requested port.",3,null],[11,"code","tiberius::error","The error code, see descriptions from the manual.",4,[[]]],[11,"state","","The error state, used as a modifier to the error number.",4,[[]]],[11,"class","","The class (severity) of the error. A class of less than …",4,[[]]],[11,"message","","The error message returned from the server.",4,[[]]],[11,"server","","The server name.",4,[[]]],[11,"procedure","","The name of the stored procedure causing the error.",4,[[]]],[11,"line","","The line number in the SQL batch or stored procedure that …",4,[[]]],[0,"numeric","tiberius","Representations of numeric types.",null,null],[3,"BigDecimal","tiberius::numeric","A big decimal type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a <code>BigInt</code>\'s composing element.",null,null],[13,"Minus","","",5,null],[13,"NoSign","","",5,null],[13,"Plus","","",5,null],[3,"Decimal","","<code>Decimal</code> represents a 128 bit representation of a …",null,null],[3,"Numeric","","Represent a sql Decimal / Numeric type. It is stored in a …",null,null],[0,"time","tiberius","Date and time handling.",null,null],[0,"chrono","tiberius::time","Mappings between TDS and and Chrono types (with <code>chrono</code> …",null,null],[3,"FixedOffset","tiberius::time::chrono","The time zone with fixed offset, from UTC-23:59:59 to …",null,null],[3,"Utc","","The UTC time zone. This is the most efficient time zone …",null,null],[3,"DateTime","","ISO 8601 combined date and time with time zone.",null,null],[3,"NaiveDate","","ISO 8601 calendar date without timezone. Allows for every …",null,null],[3,"NaiveDateTime","","ISO 8601 combined date and time without timezone.",null,null],[3,"NaiveTime","","ISO 8601 time without timezone. Allows for the nanosecond …",null,null],[3,"DateTime","tiberius::time","A presentation of <code>datetime</code> type in the server.",null,null],[3,"SmallDateTime","","A presentation of <code>smalldatetime</code> type in the server.",null,null],[3,"Date","","A presentation of <code>date</code> type in the server.",null,null],[3,"Time","","A presentation of <code>time</code> type in the server.",null,null],[3,"DateTime2","","A presentation of <code>datetime2</code> type in the server.",null,null],[3,"DateTimeOffset","","A presentation of <code>datetimeoffset</code> type in the server.",null,null],[0,"xml","tiberius","The XML containers",null,null],[3,"XmlSchema","tiberius::xml","Provides information of the location for the schema.",null,null],[3,"XmlData","","A representation of XML data in TDS. Holds the data as a …",null,null],[4,"AuthMethod","tiberius","Defines the method of authentication to the server.",null,null],[13,"SqlServer","","Authenticate directly with SQL Server.",6,null],[13,"Windows","","Authenticate with Windows credentials.",6,null],[13,"Integrated","","Authenticate as the currently logged in user. On Windows …",6,null],[3,"Client","","<code>Client</code> is the main entry point to the SQL Server, …",null,null],[3,"Config","","The <code>Config</code> struct contains all configuration information …",null,null],[8,"FromSql","","A conversion trait from a TDS type by-reference.",null,null],[10,"from_sql","","Returns the value, <code>None</code> being a null value, copying the …",7,[[["columndata",4]],[["result",6],["option",4]]]],[8,"FromSqlOwned","","A conversion trait from a TDS type by-value.",null,null],[10,"from_sql_owned","","Returns the value, <code>None</code> being a null value, taking the …",8,[[["columndata",4]],[["result",6],["option",4]]]],[3,"QueryResult","","A set of <code>Streams</code> of <code>Rows</code> resulting from a <code>SELECT</code> query. …",null,null],[3,"ExecuteResult","","A result from a query execution, listing the number of …",null,null],[3,"Column","","A column of data from a query.",null,null],[4,"ColumnType","","The type of the column.",null,null],[13,"Null","","The column doesn\'t have a specified type.",9,null],[13,"Bit","","A bit or boolean value.",9,null],[13,"Int1","","An 8-bit integer value.",9,null],[13,"Int2","","A 16-bit integer value.",9,null],[13,"Int4","","A 32-bit integer value.",9,null],[13,"Int8","","A 64-bit integer value.",9,null],[13,"Datetime4","","A 32-bit datetime value.",9,null],[13,"Float4","","A 32-bit floating point value.",9,null],[13,"Float8","","A 64-bit floating point value.",9,null],[13,"Money","","Money value.",9,null],[13,"Datetime","","A TDS 7.2 datetime value.",9,null],[13,"Money4","","A 32-bit money value.",9,null],[13,"Guid","","A unique identifier, UUID.",9,null],[13,"Intn","","N-bit integer value (variable).",9,null],[13,"Bitn","","A bit value in a variable-length type.",9,null],[13,"Decimaln","","A decimal value (same as <code>Numericn</code>).",9,null],[13,"Numericn","","A numeric value (same as <code>Decimaln</code>).",9,null],[13,"Floatn","","A n-bit floating point value.",9,null],[13,"Datetimen","","A n-bit datetime value (TDS 7.2).",9,null],[13,"Daten","","A n-bit date value (TDS 7.3).",9,null],[13,"Timen","","A n-bit time value (TDS 7.3).",9,null],[13,"Datetime2","","A n-bit datetime2 value (TDS 7.3).",9,null],[13,"DatetimeOffsetn","","A n-bit datetime value with an offset (TDS 7.3).",9,null],[13,"BigVarBin","","A variable binary value.",9,null],[13,"BigVarChar","","A large variable string value.",9,null],[13,"BigBinary","","A binary value.",9,null],[13,"BigChar","","A string value.",9,null],[13,"NVarchar","","A variable string value with UTF-16 encoding.",9,null],[13,"NChar","","A string value with UTF-16 encoding.",9,null],[13,"Xml","","A XML value.",9,null],[13,"Udt","","User-defined type.",9,null],[13,"Text","","A text value (deprecated).",9,null],[13,"Image","","A image value (deprecated).",9,null],[13,"NText","","A text value with UTF-16 encoding (deprecated).",9,null],[13,"SSVariant","","An SQL variant type.",9,null],[3,"Row","","A row of data from a query.",null,null],[8,"SqlBrowser","","An extension trait to a <code>TcpStream</code> to find a port and …",null,null],[10,"connect_named","","If the given builder defines a named instance, finds the …",10,[[["config",3]],[["box",3],["pin",3]]]],[4,"ColumnData","","A container of a value that can be represented as a TDS …",null,null],[13,"U8","","8-bit integer, unsigned.",11,null],[13,"I16","","16-bit integer, signed.",11,null],[13,"I32","","32-bit integer, signed.",11,null],[13,"I64","","64-bit integer, signed.",11,null],[13,"F32","","32-bit floating point number.",11,null],[13,"F64","","64-bit floating point number.",11,null],[13,"Bit","","Boolean.",11,null],[13,"String","","A string value.",11,null],[13,"Guid","","A Guid (UUID) value.",11,null],[13,"Binary","","Binary data.",11,null],[13,"Numeric","","Numeric value (a decimal).",11,null],[13,"Xml","","XML data.",11,null],[13,"DateTime","","DateTime value.",11,null],[13,"SmallDateTime","","A small DateTime value.",11,null],[13,"Time","","Time value.",11,null],[13,"Date","","Date value.",11,null],[13,"DateTime2","","DateTime2 value.",11,null],[13,"DateTimeOffset","","DateTime2 value with an offset.",11,null],[4,"EncryptionLevel","","The configured encryption level specifying if encryption …",null,null],[13,"Off","","Only use encryption for the login procedure",12,null],[13,"On","","Encrypt everything if possible",12,null],[13,"NotSupported","","Do not encrypt anything",12,null],[13,"Required","","Encrypt everything and fail if not possible",12,null],[8,"IntoSql","","A by-value conversion trait to a TDS type.",null,null],[10,"into_sql","","Convert to a value understood by the SQL Server. …",13,[[],["columndata",4]]],[8,"ToSql","","A conversion trait to a TDS type.",null,null],[10,"to_sql","","Convert to a value understood by the SQL Server. …",14,[[],["columndata",4]]],[3,"Uuid","","A Universally Unique Identifier (UUID).",null,null],[6,"Result","","An alias for a result that holds crate\'s error type as …",null,null],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","tiberius::error","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","tiberius","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"try_poll_next","","",17,[[["pin",3],["context",3]],[["poll",4],["option",4]]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","tiberius::numeric","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"average_floor","","Returns the floor value of the average of <code>self</code> and <code>other</code>.",22,[[]]],[11,"average_ceil","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.",22,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"to_string","","",23,[[],["string",3]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"to_string","","",24,[[],["string",3]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","tiberius::time::chrono","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"to_string","","",25,[[],["string",3]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"to_string","","",27,[[],["string",3]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"round_subsecs","","",27,[[]]],[11,"trunc_subsecs","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"to_string","","",28,[[],["string",3]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"to_string","","",29,[[],["string",3]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"round_subsecs","","",29,[[]]],[11,"trunc_subsecs","","",29,[[]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"to_string","","",30,[[],["string",3]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"round_subsecs","","",30,[[]]],[11,"trunc_subsecs","","",30,[[]]],[11,"from","tiberius::time","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","tiberius::xml","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","tiberius","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"to_string","","",39,[[],["string",3]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"eq","tiberius::error","",0,[[["errorkind",4]]]],[11,"hash","","",0,[[]]],[11,"partial_cmp","","",0,[[["errorkind",4]],[["option",4],["ordering",4]]]],[11,"clone","","",0,[[],["errorkind",4]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"cmp","","",0,[[["errorkind",4]],["ordering",4]]],[11,"try_from","tiberius::numeric","",21,[[],[["result",4],["bigdecimal",3]]]],[11,"try_from","","",21,[[],[["result",4],["bigdecimal",3]]]],[11,"to_i64","","",21,[[],["option",4]]],[11,"to_u64","","",21,[[],["option",4]]],[11,"to_f64","","",21,[[],["option",4]]],[11,"fmt","","",21,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sub","","",21,[[["bigdecimal",3]],["bigdecimal",3]]],[11,"sub","","",21,[[["bigint",3]],["bigdecimal",3]]],[11,"sub","","",21,[[["bigint",3]],["bigdecimal",3]]],[11,"sub","","",21,[[["bigdecimal",3]],["bigdecimal",3]]],[11,"fmt","","",21,[[["formatter",3]],[["error",3],["result",4]]]],[11,"add_assign","","",21,[[["bigint",3]]]],[11,"add_assign","","",21,[[["bigdecimal",3]]]],[11,"add_assign","","",21,[[["bigdecimal",3]]]],[11,"add_assign","","",21,[[["bigint",3]]]],[11,"add","","",21,[[["bigint",3]],["bigdecimal",3]]],[11,"add","","",21,[[["bigdecimal",3]],["bigdecimal",3]]],[11,"add","","",21,[[["bigdecimal",3]],["bigdecimal",3]]],[11,"add","","",21,[[["bigint",3]],["bigdecimal",3]]],[11,"partial_cmp","","",21,[[["bigdecimal",3]],[["option",4],["ordering",4]]]],[11,"from","","",21,[[],["bigdecimal",3]]],[11,"from","","",21,[[],["bigdecimal",3]]],[11,"from","","",21,[[],["bigdecimal",3]]],[11,"from","","",21,[[],["bigdecimal",3]]],[11,"from","","",21,[[],["bigdecimal",3]]],[11,"from","","",21,[[],["bigdecimal",3]]],[11,"from","","",21,[[],["bigdecimal",3]]],[11,"from","","",21,[[],["bigdecimal",3]]],[11,"from","","",21,[[["bigint",3]],["bigdecimal",3]]],[11,"from","","",21,[[],["bigdecimal",3]]],[11,"mul_assign","","",21,[[["bigdecimal",3]]]],[11,"mul_assign","","",21,[[["bigdecimal",3]]]],[11,"default","","",21,[[],["bigdecimal",3]]],[11,"mul","","",21,[[["bigint",3]],["bigdecimal",3]]],[11,"mul","","",21,[[["bigint",3]],["bigdecimal",3]]],[11,"mul","","",21,[[["bigdecimal",3]],["bigdecimal",3]]],[11,"mul","","",21,[[["bigdecimal",3]],["bigdecimal",3]]],[11,"div","","",21,[[]]],[11,"div","","",21,[[]]],[11,"div","","",21,[[["bigdecimal",3]],["bigdecimal",3]]],[11,"div","","",21,[[]]],[11,"div","","",21,[[["bigdecimal",3]],["bigdecimal",3]]],[11,"div","","",21,[[]]],[11,"clone","","",21,[[],["bigdecimal",3]]],[11,"cmp","","Complete ordering implementation for BigDecimal",21,[[["bigdecimal",3]],["ordering",4]]],[11,"neg","","",21,[[],["bigdecimal",3]]],[11,"from_str_radix","","Creates and initializes a BigDecimal.",21,[[],[["bigdecimal",3],["result",4],["parsebigdecimalerror",4]]]],[11,"zero","","",21,[[],["bigdecimal",3]]],[11,"is_zero","","",21,[[]]],[11,"from_str","","",21,[[],[["bigdecimal",3],["result",4],["parsebigdecimalerror",4]]]],[11,"from_i64","","",21,[[],[["bigdecimal",3],["option",4]]]],[11,"from_u64","","",21,[[],[["bigdecimal",3],["option",4]]]],[11,"from_f32","","",21,[[],[["bigdecimal",3],["option",4]]]],[11,"from_f64","","",21,[[],[["bigdecimal",3],["option",4]]]],[11,"sub_assign","","",21,[[["bigdecimal",3]]]],[11,"sub_assign","","",21,[[["bigdecimal",3]]]],[11,"sub_assign","","",21,[[["bigint",3]]]],[11,"sub_assign","","",21,[[["bigint",3]]]],[11,"hash","","",21,[[]]],[11,"abs","","",21,[[],["bigdecimal",3]]],[11,"abs_sub","","",21,[[["bigdecimal",3]],["bigdecimal",3]]],[11,"signum","","",21,[[],["bigdecimal",3]]],[11,"is_positive","","",21,[[]]],[11,"is_negative","","",21,[[]]],[11,"sum","","",21,[[],["bigdecimal",3]]],[11,"sum","","",21,[[],["bigdecimal",3]]],[11,"one","","",21,[[],["bigdecimal",3]]],[11,"rem","","",21,[[["bigdecimal",3]],["bigdecimal",3]]],[11,"rem","","",21,[[["bigdecimal",3]],["bigdecimal",3]]],[11,"to_bigint","","",21,[[],[["option",4],["bigint",3]]]],[11,"eq","","",21,[[["bigdecimal",3]]]],[11,"bitor","","",22,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",22,[[["bigint",3]],["bigint",3]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"shr_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[["bigint",3]]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[["bigint",3]]]],[11,"rem_assign","","",22,[[]]],[11,"rem_assign","","",22,[[]]],[11,"bitand_assign","","",22,[[["bigint",3]]]],[11,"bitand_assign","","",22,[[["bigint",3]]]],[11,"one","","",22,[[],["bigint",3]]],[11,"set_one","","",22,[[]]],[11,"is_one","","",22,[[]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[["bigint",3]],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[["bigint",3]],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"add","","",22,[[],["bigint",3]]],[11,"fmt","","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"shr","","",22,[[],["bigint",3]]],[11,"fmt","","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"not","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"shl","","",22,[[],["bigint",3]]],[11,"fmt","","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"bitand","","",22,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",22,[[["bigint",3]],["bigint",3]]],[11,"eq","","",5,[[["sign",4]]]],[11,"eq","","",22,[[["bigint",3]]]],[11,"checked_div","","",22,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"neg","","",22,[[],["bigint",3]]],[11,"neg","","Negate Sign value.",5,[[],["sign",4]]],[11,"bitxor","","",22,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",22,[[["bigint",3]],["bigint",3]]],[11,"product","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[["bigint",3]],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[],["bigint",3]]],[11,"div","","",22,[[["bigint",3]],["bigint",3]]],[11,"nth_root","","",22,[[],["bigint",3]]],[11,"sqrt","","",22,[[],["bigint",3]]],[11,"cbrt","","",22,[[],["bigint",3]]],[11,"default","","",22,[[],["bigint",3]]],[11,"hash","","",22,[[]]],[11,"hash","","",5,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[["bigint",3]]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[["bigint",3]]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[]]],[11,"mul_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[["bigint",3]]]],[11,"div_assign","","",22,[[["bigint",3]]]],[11,"div_assign","","",22,[[]]],[11,"div_assign","","",22,[[]]],[11,"partial_cmp","","",5,[[["sign",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",22,[[["bigint",3]],[["option",4],["ordering",4]]]],[11,"div_rem","","",22,[[["bigint",3]]]],[11,"div_floor","","",22,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",22,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",22,[[["bigint",3]]]],[11,"div_ceil","","",22,[[["bigint",3]],["bigint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the …",22,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number …",22,[[["bigint",3]],["bigint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest …",22,[[["bigint",3]]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and …",22,[[["bigint",3]]]],[11,"divides","","Deprecated, use <code>is_multiple_of</code> instead.",22,[[["bigint",3]]]],[11,"is_multiple_of","","Returns <code>true</code> if the number is a multiple of <code>other</code>.",22,[[["bigint",3]]]],[11,"is_even","","Returns <code>true</code> if the number is divisible by <code>2</code>.",22,[[]]],[11,"is_odd","","Returns <code>true</code> if the number is not divisible by <code>2</code>.",22,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",22,[[["bigint",3]],["bigint",3]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",22,[[["bigint",3]],["bigint",3]]],[11,"fmt","","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"checked_add","","",22,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"to_bigint","","",22,[[],[["option",4],["bigint",3]]]],[11,"zero","","",22,[[],["bigint",3]]],[11,"set_zero","","",22,[[]]],[11,"is_zero","","",22,[[]]],[11,"fmt","","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"shl_assign","","",22,[[]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",5,[[["sign",4]],["sign",4]]],[11,"mul","","",22,[[["bigint",3]],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[["bigint",3]],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"mul","","",22,[[],["bigint",3]]],[11,"from_i64","","",22,[[],[["option",4],["bigint",3]]]],[11,"from_i128","","",22,[[],[["option",4],["bigint",3]]]],[11,"from_u64","","",22,[[],[["option",4],["bigint",3]]]],[11,"from_u128","","",22,[[],[["option",4],["bigint",3]]]],[11,"from_f64","","",22,[[],[["option",4],["bigint",3]]]],[11,"clone","","",22,[[],["bigint",3]]],[11,"clone_from","","",22,[[["bigint",3]]]],[11,"clone","","",5,[[],["sign",4]]],[11,"to_biguint","","",22,[[],[["biguint",3],["option",4]]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"pow","","",22,[[["biguint",3]],["bigint",3]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"pow","","",22,[[["biguint",3]],["bigint",3]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"pow","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[["bigint",3]],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[["bigint",3]],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"rem","","",22,[[],["bigint",3]]],[11,"checked_sub","","",22,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"fmt","","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",5,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sum","","",22,[[],["bigint",3]]],[11,"abs","","",22,[[],["bigint",3]]],[11,"abs_sub","","",22,[[["bigint",3]],["bigint",3]]],[11,"signum","","",22,[[],["bigint",3]]],[11,"is_positive","","",22,[[]]],[11,"is_negative","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[["bigint",3]]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[["bigint",3]]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"sub_assign","","",22,[[]]],[11,"to_i64","","",22,[[],["option",4]]],[11,"to_i128","","",22,[[],["option",4]]],[11,"to_u64","","",22,[[],["option",4]]],[11,"to_u128","","",22,[[],["option",4]]],[11,"to_f32","","",22,[[],["option",4]]],[11,"to_f64","","",22,[[],["option",4]]],[11,"bitor_assign","","",22,[[["bigint",3]]]],[11,"bitor_assign","","",22,[[["bigint",3]]]],[11,"bitxor_assign","","",22,[[["bigint",3]]]],[11,"bitxor_assign","","",22,[[["bigint",3]]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from","","",22,[[["biguint",3]],["bigint",3]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from","","",22,[[],["bigint",3]]],[11,"from_str","","",22,[[],[["result",4],["parsebiginterror",3],["bigint",3]]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[["bigint",3]]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[["bigint",3]]]],[11,"add_assign","","",22,[[]]],[11,"add_assign","","",22,[[]]],[11,"checked_mul","","",22,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"sub","","",22,[[["bigint",3]],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"sub","","",22,[[["bigint",3]],["bigint",3]]],[11,"sub","","",22,[[],["bigint",3]]],[11,"cmp","","",22,[[["bigint",3]],["ordering",4]]],[11,"cmp","","",5,[[["sign",4]],["ordering",4]]],[11,"from_str_radix","","Creates and initializes a BigInt.",22,[[],[["result",4],["parsebiginterror",3],["bigint",3]]]],[11,"clone","tiberius","",39,[[],["uuid",3]]],[11,"default","","",39,[[],["uuid",3]]],[11,"hash","","",39,[[]]],[11,"fmt","","",39,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",39,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",39,[[["formatter",3]],[["error",3],["result",4]]]],[11,"partial_cmp","","",39,[[["uuid",3]],[["option",4],["ordering",4]]]],[11,"lt","","",39,[[["uuid",3]]]],[11,"le","","",39,[[["uuid",3]]]],[11,"gt","","",39,[[["uuid",3]]]],[11,"ge","","",39,[[["uuid",3]]]],[11,"from_str","","",39,[[],[["uuid",3],["result",4]]]],[11,"fmt","","",39,[[["formatter",3]],[["error",3],["result",4]]]],[11,"eq","","",39,[[["uuid",3]]]],[11,"ne","","",39,[[["uuid",3]]]],[11,"cmp","","",39,[[["uuid",3]],["ordering",4]]],[11,"try_from","tiberius::numeric","",23,[[],[["result",4],["error",3],["decimal",3]]]],[11,"try_from","","",23,[[],[["result",4],["error",3],["decimal",3]]]],[11,"from_i32","","",23,[[],[["option",4],["decimal",3]]]],[11,"from_i64","","",23,[[],[["option",4],["decimal",3]]]],[11,"from_u32","","",23,[[],[["option",4],["decimal",3]]]],[11,"from_u64","","",23,[[],[["option",4],["decimal",3]]]],[11,"from_f32","","",23,[[],[["option",4],["decimal",3]]]],[11,"from_f64","","",23,[[],[["option",4],["decimal",3]]]],[11,"fmt","","",23,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sub","","",23,[[["decimal",3]],["decimal",3]]],[11,"sub","","",23,[[["decimal",3]],["decimal",3]]],[11,"fmt","","",23,[[["formatter",3]],[["error",3],["result",4]]]],[11,"add_assign","","",23,[[["decimal",3]]]],[11,"add_assign","","",23,[[["decimal",3]]]],[11,"add","","",23,[[["decimal",3]],["decimal",3]]],[11,"add","","",23,[[["decimal",3]],["decimal",3]]],[11,"fmt","","",23,[[["formatter",3]],[["error",3],["result",4]]]],[11,"partial_cmp","","",23,[[["decimal",3]],[["option",4],["ordering",4]]]],[11,"div_assign","","",23,[[["decimal",3]]]],[11,"div_assign","","",23,[[["decimal",3]]]],[11,"from","","",23,[[],["decimal",3]]],[11,"from","","",23,[[],["decimal",3]]],[11,"from","","",23,[[],["decimal",3]]],[11,"from","","",23,[[],["decimal",3]]],[11,"from","","",23,[[],["decimal",3]]],[11,"from","","",23,[[],["decimal",3]]],[11,"from","","",23,[[],["decimal",3]]],[11,"from","","",23,[[],["decimal",3]]],[11,"from","","",23,[[],["decimal",3]]],[11,"from","","",23,[[],["decimal",3]]],[11,"one","","",23,[[],["decimal",3]]],[11,"mul_assign","","",23,[[["decimal",3]]]],[11,"mul_assign","","",23,[[["decimal",3]]]],[11,"default","","",23,[[],["decimal",3]]],[11,"mul","","",23,[[["decimal",3]],["decimal",3]]],[11,"mul","","",23,[[["decimal",3]],["decimal",3]]],[11,"div","","",23,[[["decimal",3]],["decimal",3]]],[11,"div","","",23,[[["decimal",3]],["decimal",3]]],[11,"clone","","",23,[[],["decimal",3]]],[11,"cmp","","",23,[[["decimal",3]],["ordering",4]]],[11,"abs","","",23,[[],["decimal",3]]],[11,"abs_sub","","",23,[[["decimal",3]],["decimal",3]]],[11,"signum","","",23,[[],["decimal",3]]],[11,"is_positive","","",23,[[]]],[11,"is_negative","","",23,[[]]],[11,"neg","","",23,[[],["decimal",3]]],[11,"from_str","","",23,[[],[["decimal",3],["result",4]]]],[11,"to_i64","","",23,[[],["option",4]]],[11,"to_i128","","",23,[[],["option",4]]],[11,"to_u64","","",23,[[],["option",4]]],[11,"to_u128","","",23,[[],["option",4]]],[11,"to_f64","","",23,[[],["option",4]]],[11,"sub_assign","","",23,[[["decimal",3]]]],[11,"sub_assign","","",23,[[["decimal",3]]]],[11,"hash","","",23,[[]]],[11,"sum","","",23,[[],["decimal",3]]],[11,"sum","","",23,[[],["decimal",3]]],[11,"serialize","","",23,[[],["result",4]]],[11,"fmt","","",23,[[["formatter",3]],[["error",3],["result",4]]]],[11,"rem","","",23,[[["decimal",3]],["decimal",3]]],[11,"rem","","",23,[[["decimal",3]],["decimal",3]]],[11,"rem_assign","","",23,[[["decimal",3]]]],[11,"rem_assign","","",23,[[["decimal",3]]]],[11,"eq","","",23,[[["decimal",3]]]],[11,"zero","","",23,[[],["decimal",3]]],[11,"is_zero","","",23,[[]]],[11,"deserialize","","",23,[[],[["result",4],["decimal",3]]]],[11,"from_str_radix","","",23,[[],[["result",4],["decimal",3]]]],[11,"fmt","tiberius::time::chrono","",26,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",28,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",27,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",29,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",25,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",30,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sub","","",28,[[["duration",3]],["naivedate",3]]],[11,"sub","","",30,[[["fixedoffset",3]],["naivetime",3]]],[11,"sub","","",30,[[["naivetime",3]],["duration",3]]],[11,"sub","","",27,[[["datetime",3]],["duration",3]]],[11,"sub","","",28,[[["naivedate",3]],["duration",3]]],[11,"sub","","",29,[[["fixedoffset",3]],["naivedatetime",3]]],[11,"sub","","",27,[[["duration",3]],["datetime",3]]],[11,"sub","","",29,[[["duration",3]],["naivedatetime",3]]],[11,"sub","","",27,[[["fixedoffset",3]],["datetime",3]]],[11,"sub","","",30,[[["duration",3]],["naivetime",3]]],[11,"sub","","",29,[[["naivedatetime",3]],["duration",3]]],[11,"fmt","","",29,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",25,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",28,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",27,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",26,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",30,[[["formatter",3]],[["error",3],["result",4]]]],[11,"add_assign","","",30,[[["duration",3]]]],[11,"add_assign","","",29,[[["duration",3]]]],[11,"add_assign","","",28,[[["duration",3]]]],[11,"add","","",28,[[["duration",3]],["naivedate",3]]],[11,"add","","",27,[[["fixedoffset",3]],["datetime",3]]],[11,"add","","",29,[[["duration",3]],["naivedatetime",3]]],[11,"add","","",27,[[["duration",3]],["datetime",3]]],[11,"add","","",30,[[["fixedoffset",3]],["naivetime",3]]],[11,"add","","",30,[[["duration",3]],["naivetime",3]]],[11,"add","","",29,[[["fixedoffset",3]],["naivedatetime",3]]],[11,"partial_cmp","","",28,[[["naivedate",3]],[["option",4],["ordering",4]]]],[11,"lt","","",28,[[["naivedate",3]]]],[11,"le","","",28,[[["naivedate",3]]]],[11,"gt","","",28,[[["naivedate",3]]]],[11,"ge","","",28,[[["naivedate",3]]]],[11,"partial_cmp","","",30,[[["naivetime",3]],[["option",4],["ordering",4]]]],[11,"lt","","",30,[[["naivetime",3]]]],[11,"le","","",30,[[["naivetime",3]]]],[11,"gt","","",30,[[["naivetime",3]]]],[11,"ge","","",30,[[["naivetime",3]]]],[11,"partial_cmp","","Compare two DateTimes based on their true time, ignoring …",27,[[["datetime",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",29,[[["naivedatetime",3]],[["option",4],["ordering",4]]]],[11,"lt","","",29,[[["naivedatetime",3]]]],[11,"le","","",29,[[["naivedatetime",3]]]],[11,"gt","","",29,[[["naivedatetime",3]]]],[11,"ge","","",29,[[["naivedatetime",3]]]],[11,"from","","",27,[[["systemtime",3]],[["datetime",3],["utc",3]]]],[11,"from","","Convert this <code>DateTime<FixedOffset></code> instance into a …",27,[[["fixedoffset",3],["datetime",3]],[["datetime",3],["local",3]]]],[11,"from","","Convert this <code>DateTime<Utc></code> instance into a <code>DateTime<Local></code>…",27,[[["datetime",3],["utc",3]],[["datetime",3],["local",3]]]],[11,"from","","Convert this <code>DateTime<Local></code> instance into a <code>DateTime<Utc></code>…",27,[[["datetime",3],["local",3]],[["datetime",3],["utc",3]]]],[11,"from","","Convert this <code>DateTime<FixedOffset></code> instance into a …",27,[[["fixedoffset",3],["datetime",3]],[["datetime",3],["utc",3]]]],[11,"from","","Convert this <code>DateTime<Local></code> instance into a …",27,[[["datetime",3],["local",3]],[["fixedoffset",3],["datetime",3]]]],[11,"from","","",27,[[["systemtime",3]],[["datetime",3],["local",3]]]],[11,"from","","Convert this <code>DateTime<Utc></code> instance into a …",27,[[["datetime",3],["utc",3]],[["fixedoffset",3],["datetime",3]]]],[11,"clone","","",25,[[],["fixedoffset",3]]],[11,"clone","","",28,[[],["naivedate",3]]],[11,"clone","","",27,[[],["datetime",3]]],[11,"clone","","",30,[[],["naivetime",3]]],[11,"clone","","",26,[[],["utc",3]]],[11,"clone","","",29,[[],["naivedatetime",3]]],[11,"cmp","","",28,[[["naivedate",3]],["ordering",4]]],[11,"cmp","","",30,[[["naivetime",3]],["ordering",4]]],[11,"cmp","","",29,[[["naivedatetime",3]],["ordering",4]]],[11,"cmp","","",27,[[["datetime",3]],["ordering",4]]],[11,"duration_round","","",27,[[["duration",3]],[["result",4],["datetime",3]]]],[11,"duration_trunc","","",27,[[["duration",3]],[["result",4],["datetime",3]]]],[11,"from_str","","",27,[[],[["result",4],["parseerror",3],["datetime",3]]]],[11,"from_str","","",30,[[],[["parseerror",3],["result",4],["naivetime",3]]]],[11,"from_str","","",28,[[],[["naivedate",3],["result",4],["parseerror",3]]]],[11,"from_str","","",29,[[],[["result",4],["naivedatetime",3],["parseerror",3]]]],[11,"from_str","","",27,[[],[["result",4],["datetime",3],["parseerror",3]]]],[11,"from_str","","",27,[[],[["datetime",3],["result",4],["parseerror",3]]]],[11,"sub_assign","","",29,[[["duration",3]]]],[11,"sub_assign","","",30,[[["duration",3]]]],[11,"sub_assign","","",28,[[["duration",3]]]],[11,"hash","","",25,[[]]],[11,"hash","","",29,[[]]],[11,"hash","","",27,[[]]],[11,"hash","","",28,[[]]],[11,"hash","","",30,[[]]],[11,"year","","",27,[[]]],[11,"month","","",27,[[]]],[11,"month0","","",27,[[]]],[11,"day","","",27,[[]]],[11,"day0","","",27,[[]]],[11,"ordinal","","",27,[[]]],[11,"ordinal0","","",27,[[]]],[11,"weekday","","",27,[[],["weekday",4]]],[11,"iso_week","","",27,[[],["isoweek",3]]],[11,"with_year","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_month","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_month0","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_day","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_day0","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_ordinal","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_ordinal0","","",27,[[],[["option",4],["datetime",3]]]],[11,"year","","Returns the year number in the calendar date.",28,[[]]],[11,"month","","Returns the month number starting from 1.",28,[[]]],[11,"month0","","Returns the month number starting from 0.",28,[[]]],[11,"day","","Returns the day of month starting from 1.",28,[[]]],[11,"day0","","Returns the day of month starting from 0.",28,[[]]],[11,"ordinal","","Returns the day of year starting from 1.",28,[[]]],[11,"ordinal0","","Returns the day of year starting from 0.",28,[[]]],[11,"weekday","","Returns the day of week.",28,[[],["weekday",4]]],[11,"iso_week","","",28,[[],["isoweek",3]]],[11,"with_year","","Makes a new <code>NaiveDate</code> with the year number changed.",28,[[],[["naivedate",3],["option",4]]]],[11,"with_month","","Makes a new <code>NaiveDate</code> with the month number (starting …",28,[[],[["naivedate",3],["option",4]]]],[11,"with_month0","","Makes a new <code>NaiveDate</code> with the month number (starting …",28,[[],[["naivedate",3],["option",4]]]],[11,"with_day","","Makes a new <code>NaiveDate</code> with the day of month (starting …",28,[[],[["naivedate",3],["option",4]]]],[11,"with_day0","","Makes a new <code>NaiveDate</code> with the day of month (starting …",28,[[],[["naivedate",3],["option",4]]]],[11,"with_ordinal","","Makes a new <code>NaiveDate</code> with the day of year (starting from …",28,[[],[["naivedate",3],["option",4]]]],[11,"with_ordinal0","","Makes a new <code>NaiveDate</code> with the day of year (starting from …",28,[[],[["naivedate",3],["option",4]]]],[11,"year","","Returns the year number in the calendar date.",29,[[]]],[11,"month","","Returns the month number starting from 1.",29,[[]]],[11,"month0","","Returns the month number starting from 0.",29,[[]]],[11,"day","","Returns the day of month starting from 1.",29,[[]]],[11,"day0","","Returns the day of month starting from 0.",29,[[]]],[11,"ordinal","","Returns the day of year starting from 1.",29,[[]]],[11,"ordinal0","","Returns the day of year starting from 0.",29,[[]]],[11,"weekday","","Returns the day of week.",29,[[],["weekday",4]]],[11,"iso_week","","",29,[[],["isoweek",3]]],[11,"with_year","","Makes a new <code>NaiveDateTime</code> with the year number changed.",29,[[],[["option",4],["naivedatetime",3]]]],[11,"with_month","","Makes a new <code>NaiveDateTime</code> with the month number (starting …",29,[[],[["option",4],["naivedatetime",3]]]],[11,"with_month0","","Makes a new <code>NaiveDateTime</code> with the month number (starting …",29,[[],[["option",4],["naivedatetime",3]]]],[11,"with_day","","Makes a new <code>NaiveDateTime</code> with the day of month (starting …",29,[[],[["option",4],["naivedatetime",3]]]],[11,"with_day0","","Makes a new <code>NaiveDateTime</code> with the day of month (starting …",29,[[],[["option",4],["naivedatetime",3]]]],[11,"with_ordinal","","Makes a new <code>NaiveDateTime</code> with the day of year (starting …",29,[[],[["option",4],["naivedatetime",3]]]],[11,"with_ordinal0","","Makes a new <code>NaiveDateTime</code> with the day of year (starting …",29,[[],[["option",4],["naivedatetime",3]]]],[11,"from_offset","","",26,[[["utc",3]],["utc",3]]],[11,"offset_from_local_date","","",26,[[["naivedate",3]],[["utc",3],["localresult",4]]]],[11,"offset_from_local_datetime","","",26,[[["naivedatetime",3]],[["utc",3],["localresult",4]]]],[11,"offset_from_utc_date","","",26,[[["naivedate",3]],["utc",3]]],[11,"offset_from_utc_datetime","","",26,[[["naivedatetime",3]],["utc",3]]],[11,"from_offset","","",25,[[["fixedoffset",3]],["fixedoffset",3]]],[11,"offset_from_local_date","","",25,[[["naivedate",3]],[["fixedoffset",3],["localresult",4]]]],[11,"offset_from_local_datetime","","",25,[[["naivedatetime",3]],[["fixedoffset",3],["localresult",4]]]],[11,"offset_from_utc_date","","",25,[[["naivedate",3]],["fixedoffset",3]]],[11,"offset_from_utc_datetime","","",25,[[["naivedatetime",3]],["fixedoffset",3]]],[11,"hour","","",27,[[]]],[11,"minute","","",27,[[]]],[11,"second","","",27,[[]]],[11,"nanosecond","","",27,[[]]],[11,"with_hour","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_minute","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_second","","",27,[[],[["option",4],["datetime",3]]]],[11,"with_nanosecond","","",27,[[],[["option",4],["datetime",3]]]],[11,"hour","","Returns the hour number from 0 to 23.",29,[[]]],[11,"minute","","Returns the minute number from 0 to 59.",29,[[]]],[11,"second","","Returns the second number from 0 to 59.",29,[[]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole …",29,[[]]],[11,"with_hour","","Makes a new <code>NaiveDateTime</code> with the hour number changed.",29,[[],[["option",4],["naivedatetime",3]]]],[11,"with_minute","","Makes a new <code>NaiveDateTime</code> with the minute number changed.",29,[[],[["option",4],["naivedatetime",3]]]],[11,"with_second","","Makes a new <code>NaiveDateTime</code> with the second number changed.",29,[[],[["option",4],["naivedatetime",3]]]],[11,"with_nanosecond","","Makes a new <code>NaiveDateTime</code> with nanoseconds since the …",29,[[],[["option",4],["naivedatetime",3]]]],[11,"hour","","Returns the hour number from 0 to 23.",30,[[]]],[11,"minute","","Returns the minute number from 0 to 59.",30,[[]]],[11,"second","","Returns the second number from 0 to 59.",30,[[]]],[11,"nanosecond","","Returns the number of nanoseconds since the whole …",30,[[]]],[11,"with_hour","","Makes a new <code>NaiveTime</code> with the hour number changed.",30,[[],[["option",4],["naivetime",3]]]],[11,"with_minute","","Makes a new <code>NaiveTime</code> with the minute number changed.",30,[[],[["option",4],["naivetime",3]]]],[11,"with_second","","Makes a new <code>NaiveTime</code> with the second number changed.",30,[[],[["option",4],["naivetime",3]]]],[11,"with_nanosecond","","Makes a new <code>NaiveTime</code> with nanoseconds since the whole …",30,[[],[["option",4],["naivetime",3]]]],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last …",30,[[]]],[11,"eq","","",25,[[["fixedoffset",3]]]],[11,"ne","","",25,[[["fixedoffset",3]]]],[11,"eq","","",26,[[["utc",3]]]],[11,"eq","","",28,[[["naivedate",3]]]],[11,"ne","","",28,[[["naivedate",3]]]],[11,"eq","","",29,[[["naivedatetime",3]]]],[11,"ne","","",29,[[["naivedatetime",3]]]],[11,"eq","","",27,[[["datetime",3]]]],[11,"eq","","",30,[[["naivetime",3]]]],[11,"ne","","",30,[[["naivetime",3]]]],[11,"fix","","",25,[[],["fixedoffset",3]]],[11,"fix","","",26,[[],["fixedoffset",3]]],[11,"from_sql","tiberius","",39,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql","tiberius::numeric","",24,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql","","",23,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql","","",21,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql","tiberius::time::chrono","",29,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql","","",30,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql","","",28,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql","","",27,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql","","",27,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql_owned","tiberius","",39,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql_owned","tiberius::numeric","",24,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql_owned","tiberius::xml","",38,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql_owned","tiberius::numeric","",23,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql_owned","","",21,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql_owned","tiberius::time::chrono","",29,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql_owned","","",30,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql_owned","","",28,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql_owned","","",27,[[["columndata",4]],[["result",6],["option",4]]]],[11,"from_sql_owned","","",27,[[["columndata",4]],[["result",6],["option",4]]]],[11,"to_sql","tiberius::numeric","",24,[[],["columndata",4]]],[11,"to_sql","tiberius::xml","",38,[[],["columndata",4]]],[11,"to_sql","tiberius","",39,[[],["columndata",4]]],[11,"to_sql","tiberius::numeric","",23,[[],["columndata",4]]],[11,"to_sql","","",21,[[],["columndata",4]]],[11,"to_sql","tiberius::time::chrono","",28,[[],["columndata",4]]],[11,"to_sql","","",30,[[],["columndata",4]]],[11,"to_sql","","",29,[[],["columndata",4]]],[11,"to_sql","","",27,[[],["columndata",4]]],[11,"to_sql","","",27,[[],["columndata",4]]],[11,"into_sql","tiberius::xml","",38,[[],["columndata",4]]],[11,"as_ref","","",38,[[]]],[11,"from","tiberius::error","",1,[[["error",3]]]],[11,"from","","",1,[[["error",3]]]],[11,"from","","",1,[[["infallible",4]]]],[11,"from","","",1,[[["error",3]],["error",4]]],[11,"from","","",1,[[["parseinterror",3]],["error",4]]],[11,"from","","",1,[[["utf8error",3]],["error",4]]],[11,"from","","",1,[[["fromutf8error",3]],["error",4]]],[11,"from","","",1,[[["fromutf16error",3]],["error",4]]],[11,"from","","",1,[[["error",3]],["error",4]]],[11,"from","","",1,[[["error",3]],["error",4]]],[11,"into_iter","tiberius","",18,[[]]],[11,"into_iter","","",20,[[]]],[11,"clone","","",6,[[],["authmethod",4]]],[11,"clone","","",15,[[],["config",3]]],[11,"clone","tiberius::error","",1,[[],["error",4]]],[11,"clone","tiberius","",9,[[],["columntype",4]]],[11,"clone","","",11,[[],["columndata",4]]],[11,"clone","tiberius::error","",4,[[],["tokenerror",3]]],[11,"clone","tiberius::numeric","",24,[[],["numeric",3]]],[11,"clone","tiberius::time","",31,[[],["datetime",3]]],[11,"clone","","",32,[[],["smalldatetime",3]]],[11,"clone","","",33,[[],["date",3]]],[11,"clone","","",34,[[],["time",3]]],[11,"clone","","",35,[[],["datetime2",3]]],[11,"clone","","",36,[[],["datetimeoffset",3]]],[11,"clone","tiberius::xml","",37,[[],["xmlschema",3]]],[11,"clone","","",38,[[],["xmldata",3]]],[11,"clone","tiberius","",12,[[],["encryptionlevel",4]]],[11,"default","","",15,[[]]],[11,"eq","","",6,[[["authmethod",4]]]],[11,"ne","","",6,[[["authmethod",4]]]],[11,"eq","tiberius::numeric","",24,[[]]],[11,"eq","tiberius::time","",31,[[["datetime",3]]]],[11,"ne","","",31,[[["datetime",3]]]],[11,"eq","","",32,[[["smalldatetime",3]]]],[11,"ne","","",32,[[["smalldatetime",3]]]],[11,"eq","","",33,[[["date",3]]]],[11,"ne","","",33,[[["date",3]]]],[11,"eq","","",34,[[["time",3]]]],[11,"eq","","",35,[[["datetime2",3]]]],[11,"ne","","",35,[[["datetime2",3]]]],[11,"eq","","",36,[[["datetimeoffset",3]]]],[11,"ne","","",36,[[["datetimeoffset",3]]]],[11,"eq","tiberius::xml","",37,[[["xmlschema",3]]]],[11,"ne","","",37,[[["xmlschema",3]]]],[11,"eq","","",38,[[["xmldata",3]]]],[11,"ne","","",38,[[["xmldata",3]]]],[11,"eq","tiberius","",12,[[["encryptionlevel",4]]]],[11,"to_string","tiberius::xml","",38,[[],["string",3]]],[11,"fmt","tiberius","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","tiberius::error","",1,[[["formatter",3]],["result",6]]],[11,"fmt","tiberius","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","tiberius::error","",4,[[["formatter",3]],["result",6]]],[11,"fmt","tiberius::numeric","",24,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","tiberius::time","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","tiberius::xml","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","tiberius","",12,[[["formatter",3]],["result",6]]],[11,"fmt","tiberius::error","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","tiberius::numeric","",24,[[["formatter",3]],[["result",4],["error",3]]]],[11,"try_from","tiberius","",12,[[],[["encryptionlevel",4],["result",4]]]],[11,"try_from","","",12,[[],[["encryptionlevel",4],["result",4]]]],[11,"poll_next","","",17,[[["context",3],["pin",3]],[["option",4],["poll",4]]]],[11,"sql_server","","Construct a new SQL Server authentication configuration.",6,[[]]],[11,"windows","","Construct a new Windows authentication configuration.",6,[[]]],[11,"new","","Create a new <code>Config</code> with the default settings.",15,[[]]],[11,"host","","A host or ip address to connect to.",15,[[]]],[11,"port","","The server port.",15,[[]]],[11,"database","","The database to connect to.",15,[[]]],[11,"instance_name","","The instance name as defined in the SQL Browser. Only …",15,[[]]],[11,"encryption","","Set the preferred encryption level.",15,[[["encryptionlevel",4]]]],[11,"trust_cert","","If set, the server certificate will not be validated and …",15,[[]]],[11,"authentication","","Sets the authentication method.",15,[[["authmethod",4]]]],[11,"get_addr","","Get the host address including port",15,[[],["string",3]]],[11,"from_ado_string","","Creates a new <code>Config</code> from an ADO.NET connection string.",15,[[],["result",6]]],[11,"from_jdbc_string","","Creates a new <code>Config</code> from a JDBC connection string.",15,[[],["result",6]]],[11,"connect","","Uses an instance of <code>Config</code> to specify the connection …",16,[[["config",3]]]],[11,"execute","","Executes SQL statements in the SQL Server, returning the …",16,[[]]],[11,"query","","Executes SQL statements in the SQL Server, returning …",16,[[]]],[11,"simple_query","","Execute multiple queries, delimited with <code>;</code> and return …",16,[[]]],[11,"columns","","Names of the columns of the current resultset. Order is …",17,[[],["option",4]]],[11,"next_resultset","","Returns <code>true</code> if stream has more result sets available. …",17,[[]]],[11,"into_results","","Collects results from all queries in the stream into …",17,[[]]],[11,"into_first_result","","Collects the output of the first query, dropping any …",17,[[]]],[11,"into_row","","Collects the first row from the output of the first …",17,[[]]],[11,"rows_affected","","A slice of numbers of rows affected in the same order as …",18,[[]]],[11,"total","","Aggregates all resulting row counts into a sum.",18,[[]]],[11,"name","","The name of the column.",19,[[]]],[11,"column_type","","The type of the column.",19,[[],["columntype",4]]],[11,"columns","","Columns defining the row data. Columns listed here are in …",20,[[]]],[11,"len","","Returns the number of columns in the row.",20,[[]]],[11,"get","","Retrieve a column value for a given column index, which …",20,[[],["option",4]]],[11,"try_get","","Retrieve a column\'s value for a given column index.",20,[[],[["result",6],["option",4]]]],[11,"new","tiberius::numeric","Creates and initializes a <code>BigDecimal</code>.",21,[[["bigint",3]],["bigdecimal",3]]],[11,"parse_bytes","","Creates and initializes a <code>BigDecimal</code>.",21,[[],[["bigdecimal",3],["option",4]]]],[11,"with_scale","","Return a new BigDecimal object equivalent to self, with …",21,[[],["bigdecimal",3]]],[11,"with_prec","","Return a new BigDecimal object with precision set to new …",21,[[],["bigdecimal",3]]],[11,"sign","","Return the sign of the <code>BigDecimal</code> as <code>num::bigint::Sign</code>.",21,[[],["sign",4]]],[11,"as_bigint_and_exponent","","Return the internal big integer value and an exponent. …",21,[[]]],[11,"into_bigint_and_exponent","","Convert into the internal big integer value and an …",21,[[]]],[11,"digits","","Number of digits in the non-scaled integer representation",21,[[]]],[11,"abs","","Compute the absolute value of number",21,[[],["bigdecimal",3]]],[11,"double","","",21,[[],["bigdecimal",3]]],[11,"half","","Divide this efficiently by 2",21,[[],["bigdecimal",3]]],[11,"square","","",21,[[],["bigdecimal",3]]],[11,"cube","","",21,[[],["bigdecimal",3]]],[11,"sqrt","","Take the square root of the number",21,[[],[["bigdecimal",3],["option",4]]]],[11,"cbrt","","Take the cube root of the number",21,[[],["bigdecimal",3]]],[11,"inverse","","Compute the reciprical of the number: x-1",21,[[],["bigdecimal",3]]],[11,"round","","Return number rounded to round_digits precision after the …",21,[[],["bigdecimal",3]]],[11,"is_integer","","Return true if this number has zero fractional part (is …",21,[[]]],[11,"exp","","Evaluate the natural-exponential function ex",21,[[],["bigdecimal",3]]],[11,"normalized","","",21,[[],["bigdecimal",3]]],[11,"new","","Creates and initializes a BigInt.",22,[[["global",3],["vec",3],["sign",4]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a <code>BigInt</code>.",22,[[["biguint",3],["sign",4]],["bigint",3]]],[11,"from_slice","","Creates and initializes a <code>BigInt</code>.",22,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a <code>BigInt</code>.",22,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a <code>BigInt</code>.",22,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a <code>BigInt</code>.",22,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a <code>BigInt</code> from an array of bytes in…",22,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a <code>BigInt</code> from an array of bytes …",22,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a <code>BigInt</code>.",22,[[],[["option",4],["bigint",3]]]],[11,"from_radix_be","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …",22,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"from_radix_le","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …",22,[[["sign",4]],[["option",4],["bigint",3]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the <code>BigInt</code>…",22,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the <code>BigInt</code>…",22,[[]]],[11,"to_u32_digits","","Returns the sign and the <code>u32</code> digits representation of the …",22,[[]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the …",22,[[],[["global",3],["vec",3]]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the …",22,[[],[["global",3],["vec",3]]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given …",22,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian …",22,[[]]],[11,"to_radix_le","","Returns the integer in the requested base in …",22,[[]]],[11,"sign","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.",22,[[],["sign",4]]],[11,"magnitude","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.",22,[[],["biguint",3]]],[11,"into_parts","","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …",22,[[]]],[11,"bits","","Determines the fewest bits necessary to express the <code>BigInt</code>…",22,[[]]],[11,"to_biguint","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it\'s not negative.",22,[[],[["biguint",3],["option",4]]]],[11,"checked_add","","",22,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_sub","","",22,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_mul","","",22,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"checked_div","","",22,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"pow","","Returns <code>self ^ exponent</code>.",22,[[],["bigint",3]]],[11,"modpow","","Returns <code>(self ^ exponent) mod modulus</code>",22,[[["bigint",3]],["bigint",3]]],[11,"sqrt","","Returns the truncated principal square root of <code>self</code> -- …",22,[[],["bigint",3]]],[11,"cbrt","","Returns the truncated principal cube root of <code>self</code> -- see …",22,[[],["bigint",3]]],[11,"nth_root","","Returns the truncated principal <code>n</code>th root of <code>self</code> -- See …",22,[[],["bigint",3]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are …",22,[[],["option",4]]],[11,"new","","Returns a <code>Decimal</code> with a 64 bit <code>m</code> representation and …",23,[[],["decimal",3]]],[11,"from_i128_with_scale","","Creates a <code>Decimal</code> using a 128 bit signed <code>m</code> representation …",23,[[],["decimal",3]]],[11,"from_parts","","Returns a <code>Decimal</code> using the instances constituent parts.",23,[[],["decimal",3]]],[11,"from_scientific","","Returns a <code>Result</code> which if successful contains the <code>Decimal</code> …",23,[[],[["result",4],["error",3],["decimal",3]]]],[11,"scale","","Returns the scale of the decimal number, otherwise known …",23,[[]]],[11,"set_sign","","An optimized method for changing the sign of a decimal …",23,[[]]],[11,"set_sign_positive","","An optimized method for changing the sign of a decimal …",23,[[]]],[11,"set_sign_negative","","An optimized method for changing the sign of a decimal …",23,[[]]],[11,"set_scale","","An optimized method for changing the scale of a decimal …",23,[[],[["error",3],["result",4]]]],[11,"rescale","","Modifies the <code>Decimal</code> to the given scale, attempting to do …",23,[[]]],[11,"serialize","","Returns a serialized version of the decimal number. The …",23,[[]]],[11,"deserialize","","Deserializes the given bytes into a decimal number. The …",23,[[],["decimal",3]]],[11,"is_negative","","Returns <code>true</code> if the decimal is negative.",23,[[]]],[11,"is_positive","","Returns <code>true</code> if the decimal is positive.",23,[[]]],[11,"is_sign_negative","","Returns <code>true</code> if the sign bit of the decimal is negative.",23,[[]]],[11,"is_sign_positive","","Returns <code>true</code> if the sign bit of the decimal is positive.",23,[[]]],[11,"min_value","","Returns the minimum possible number that <code>Decimal</code> can …",23,[[],["decimal",3]]],[11,"max_value","","Returns the maximum possible number that <code>Decimal</code> can …",23,[[],["decimal",3]]],[11,"trunc","","Returns a new <code>Decimal</code> integral with no fractional portion.…",23,[[],["decimal",3]]],[11,"fract","","Returns a new <code>Decimal</code> representing the fractional portion …",23,[[],["decimal",3]]],[11,"abs","","Computes the absolute value of <code>self</code>.",23,[[],["decimal",3]]],[11,"floor","","Returns the largest integer less than or equal to a …",23,[[],["decimal",3]]],[11,"ceil","","Returns the smallest integer greater than or equal to a …",23,[[],["decimal",3]]],[11,"max","","Returns the maximum of the two numbers.",23,[[["decimal",3]],["decimal",3]]],[11,"min","","Returns the minimum of the two numbers.",23,[[["decimal",3]],["decimal",3]]],[11,"normalize","","Strips any trailing zero\'s from a <code>Decimal</code> and converts -0 …",23,[[],["decimal",3]]],[11,"round","","Returns a new <code>Decimal</code> number with no fractional portion …",23,[[],["decimal",3]]],[11,"round_dp_with_strategy","","Returns a new <code>Decimal</code> number with the specified number of …",23,[[["roundingstrategy",4]],["decimal",3]]],[11,"round_dp","","Returns a new <code>Decimal</code> number with the specified number of …",23,[[],["decimal",3]]],[11,"unpack","","Convert <code>Decimal</code> to an internal representation of the …",23,[[],["unpackeddecimal",3]]],[11,"checked_add","","Checked addition. Computes <code>self + other</code>, returning <code>None</code> …",23,[[["decimal",3]],[["option",4],["decimal",3]]]],[11,"checked_sub","","Checked subtraction. Computes <code>self - other</code>, returning <code>None</code>…",23,[[["decimal",3]],[["option",4],["decimal",3]]]],[11,"checked_mul","","Checked multiplication. Computes <code>self * other</code>, returning …",23,[[["decimal",3]],[["option",4],["decimal",3]]]],[11,"checked_div","","Checked division. Computes <code>self / other</code>, returning <code>None</code> …",23,[[["decimal",3]],[["option",4],["decimal",3]]]],[11,"checked_rem","","Checked remainder. Computes <code>self % other</code>, returning <code>None</code> …",23,[[["decimal",3]],[["option",4],["decimal",3]]]],[11,"exp","","The estimated exponential function, ex, rounded to 8 …",23,[[],["decimal",3]]],[11,"exp_with_tolerance","","The estimated exponential function, ex, rounded to 8 …",23,[[["decimal",3]],["decimal",3]]],[11,"powi","","Raise self to the given unsigned integer exponent: xy",23,[[],["decimal",3]]],[11,"sqrt","","The square root of a Decimal. Uses a standard Babylonian …",23,[[],[["option",4],["decimal",3]]]],[11,"ln","","The natural logarithm for a Decimal. Uses a fast …",23,[[],["decimal",3]]],[11,"erf","","Abramowitz Approximation of Error Function from wikipedia",23,[[],["decimal",3]]],[11,"norm_cdf","","The Cumulative distribution function for a Normal …",23,[[],["decimal",3]]],[11,"norm_pdf","","The Probability density function for a Normal distribution",23,[[],["decimal",3]]],[11,"from_str_radix","","",23,[[],[["result",4],["error",3],["decimal",3]]]],[11,"new_with_scale","","Creates a new Numeric value.",24,[[]]],[11,"dec_part","","Extract the decimal part.",24,[[]]],[11,"int_part","","Extract the integer part.",24,[[]]],[11,"scale","","The scale (where is the decimal point) of the value.",24,[[]]],[11,"value","","The internal integer value",24,[[]]],[11,"precision","","The precision of the <code>Number</code> as a number of digits.",24,[[]]],[11,"east","tiberius::time::chrono","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …",25,[[],["fixedoffset",3]]],[11,"east_opt","","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …",25,[[],[["fixedoffset",3],["option",4]]]],[11,"west","","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …",25,[[],["fixedoffset",3]]],[11,"west_opt","","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …",25,[[],[["fixedoffset",3],["option",4]]]],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC …",25,[[]]],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the …",25,[[]]],[11,"today","","Returns a <code>Date</code> which corresponds to the current date.",26,[[],[["date",3],["utc",3]]]],[11,"now","","Returns a <code>DateTime</code> which corresponds to the current date.",26,[[],[["datetime",3],["utc",3]]]],[11,"from_utc","","Makes a new <code>DateTime</code> with given <em>UTC</em> datetime and offset. …",27,[[["naivedatetime",3]],["datetime",3]]],[11,"date","","Retrieves a date component.",27,[[],["date",3]]],[11,"time","","Retrieves a time component. Unlike <code>date</code>, this is not …",27,[[],["naivetime",3]]],[11,"timestamp","","Returns the number of non-leap seconds since January 1, …",27,[[]]],[11,"timestamp_millis","","Returns the number of non-leap-milliseconds since January …",27,[[]]],[11,"timestamp_nanos","","Returns the number of non-leap-nanoseconds since January …",27,[[]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second …",27,[[]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second …",27,[[]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second …",27,[[]]],[11,"offset","","Retrieves an associated offset from UTC.",27,[[]]],[11,"timezone","","Retrieves an associated time zone.",27,[[]]],[11,"with_timezone","","Changes the associated time zone. This does not change …",27,[[],["datetime",3]]],[11,"checked_add_signed","","Adds given <code>Duration</code> to the current date and time.",27,[[["duration",3]],[["option",4],["datetime",3]]]],[11,"checked_sub_signed","","Subtracts given <code>Duration</code> from the current date and time.",27,[[["duration",3]],[["option",4],["datetime",3]]]],[11,"signed_duration_since","","Subtracts another <code>DateTime</code> from the current date and time.…",27,[[["datetime",3]],["duration",3]]],[11,"naive_utc","","Returns a view to the naive UTC datetime.",27,[[],["naivedatetime",3]]],[11,"naive_local","","Returns a view to the naive local datetime.",27,[[],["naivedatetime",3]]],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as …",27,[[],[["result",4],["parseerror",3],["datetime",3]]]],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such …",27,[[],[["result",4],["parseerror",3],["datetime",3]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",27,[[],[["result",4],["parseerror",3],["datetime",3]]]],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as …",27,[[],["string",3]]],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string …",27,[[],["string",3]]],[11,"to_rfc3339_opts","","Return an RFC 3339 and ISO 8601 date and time string with …",27,[[["secondsformat",4]],["string",3]]],[11,"format_with_items","","Formats the combined date and time with the specified …",27,[[],["delayedformat",3]]],[11,"format","","Formats the combined date and time with the specified …",27,[[],[["delayedformat",3],["strftimeitems",3]]]],[11,"from_ymd","","Makes a new <code>NaiveDate</code> from the calendar date (year, month …",28,[[],["naivedate",3]]],[11,"from_ymd_opt","","Makes a new <code>NaiveDate</code> from the calendar date (year, month …",28,[[],[["naivedate",3],["option",4]]]],[11,"from_yo","","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …",28,[[],["naivedate",3]]],[11,"from_yo_opt","","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …",28,[[],[["naivedate",3],["option",4]]]],[11,"from_isoywd","","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …",28,[[["weekday",4]],["naivedate",3]]],[11,"from_isoywd_opt","","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …",28,[[["weekday",4]],[["naivedate",3],["option",4]]]],[11,"from_num_days_from_ce","","Makes a new <code>NaiveDate</code> from a day\'s number in the …",28,[[],["naivedate",3]]],[11,"from_num_days_from_ce_opt","","Makes a new <code>NaiveDate</code> from a day\'s number in the …",28,[[],[["naivedate",3],["option",4]]]],[11,"from_weekday_of_month","","Makes a new <code>NaiveDate</code> by counting the number of …",28,[[["weekday",4]],["naivedate",3]]],[11,"from_weekday_of_month_opt","","Makes a new <code>NaiveDate</code> by counting the number of …",28,[[["weekday",4]],[["naivedate",3],["option",4]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",28,[[],[["naivedate",3],["result",4],["parseerror",3]]]],[11,"and_time","","Makes a new <code>NaiveDateTime</code> from the current date and given …",28,[[["naivetime",3]],["naivedatetime",3]]],[11,"and_hms","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",28,[[],["naivedatetime",3]]],[11,"and_hms_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",28,[[],[["option",4],["naivedatetime",3]]]],[11,"and_hms_milli","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",28,[[],["naivedatetime",3]]],[11,"and_hms_milli_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",28,[[],[["option",4],["naivedatetime",3]]]],[11,"and_hms_micro","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",28,[[],["naivedatetime",3]]],[11,"and_hms_micro_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",28,[[],[["option",4],["naivedatetime",3]]]],[11,"and_hms_nano","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",28,[[],["naivedatetime",3]]],[11,"and_hms_nano_opt","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …",28,[[],[["option",4],["naivedatetime",3]]]],[11,"succ","","Makes a new <code>NaiveDate</code> for the next calendar date.",28,[[],["naivedate",3]]],[11,"succ_opt","","Makes a new <code>NaiveDate</code> for the next calendar date.",28,[[],[["naivedate",3],["option",4]]]],[11,"pred","","Makes a new <code>NaiveDate</code> for the previous calendar date.",28,[[],["naivedate",3]]],[11,"pred_opt","","Makes a new <code>NaiveDate</code> for the previous calendar date.",28,[[],[["naivedate",3],["option",4]]]],[11,"checked_add_signed","","Adds the <code>days</code> part of given <code>Duration</code> to the current date.",28,[[["duration",3]],[["naivedate",3],["option",4]]]],[11,"checked_sub_signed","","Subtracts the <code>days</code> part of given <code>Duration</code> from the …",28,[[["duration",3]],[["naivedate",3],["option",4]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveDate</code> from the current date. …",28,[[["naivedate",3]],["duration",3]]],[11,"format_with_items","","Formats the date with the specified formatting items. …",28,[[],["delayedformat",3]]],[11,"format","","Formats the date with the specified format string. See …",28,[[],[["delayedformat",3],["strftimeitems",3]]]],[11,"iter_days","","Returns an iterator that steps by days until the last …",28,[[],["naivedatedaysiterator",3]]],[11,"iter_weeks","","Returns an iterator that steps by weeks until the last …",28,[[],["naivedateweeksiterator",3]]],[11,"new","","Makes a new <code>NaiveDateTime</code> from date and time components. …",29,[[["naivedate",3],["naivetime",3]],["naivedatetime",3]]],[11,"from_timestamp","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …",29,[[],["naivedatetime",3]]],[11,"from_timestamp_opt","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …",29,[[],[["option",4],["naivedatetime",3]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",29,[[],[["result",4],["naivedatetime",3],["parseerror",3]]]],[11,"date","","Retrieves a date component.",29,[[],["naivedate",3]]],[11,"time","","Retrieves a time component.",29,[[],["naivetime",3]]],[11,"timestamp","","Returns the number of non-leap seconds since the midnight …",29,[[]]],[11,"timestamp_millis","","Returns the number of non-leap <em>milliseconds</em> since …",29,[[]]],[11,"timestamp_nanos","","Returns the number of non-leap <em>nanoseconds</em> since midnight …",29,[[]]],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole …",29,[[]]],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole …",29,[[]]],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole …",29,[[]]],[11,"checked_add_signed","","Adds given <code>Duration</code> to the current date and time.",29,[[["duration",3]],[["option",4],["naivedatetime",3]]]],[11,"checked_sub_signed","","Subtracts given <code>Duration</code> from the current date and time.",29,[[["duration",3]],[["option",4],["naivedatetime",3]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveDateTime</code> from the current date and …",29,[[["naivedatetime",3]],["duration",3]]],[11,"format_with_items","","Formats the combined date and time with the specified …",29,[[],["delayedformat",3]]],[11,"format","","Formats the combined date and time with the specified …",29,[[],[["delayedformat",3],["strftimeitems",3]]]],[11,"from_hms","","Makes a new <code>NaiveTime</code> from hour, minute and second.",30,[[],["naivetime",3]]],[11,"from_hms_opt","","Makes a new <code>NaiveTime</code> from hour, minute and second.",30,[[],[["option",4],["naivetime",3]]]],[11,"from_hms_milli","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",30,[[],["naivetime",3]]],[11,"from_hms_milli_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",30,[[],[["option",4],["naivetime",3]]]],[11,"from_hms_micro","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",30,[[],["naivetime",3]]],[11,"from_hms_micro_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",30,[[],[["option",4],["naivetime",3]]]],[11,"from_hms_nano","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",30,[[],["naivetime",3]]],[11,"from_hms_nano_opt","","Makes a new <code>NaiveTime</code> from hour, minute, second and …",30,[[],[["option",4],["naivetime",3]]]],[11,"from_num_seconds_from_midnight","","Makes a new <code>NaiveTime</code> from the number of seconds since …",30,[[],["naivetime",3]]],[11,"from_num_seconds_from_midnight_opt","","Makes a new <code>NaiveTime</code> from the number of seconds since …",30,[[],[["option",4],["naivetime",3]]]],[11,"parse_from_str","","Parses a string with the specified format string and …",30,[[],[["parseerror",3],["result",4],["naivetime",3]]]],[11,"overflowing_add_signed","","Adds given <code>Duration</code> to the current time, and also returns …",30,[[["duration",3]]]],[11,"overflowing_sub_signed","","Subtracts given <code>Duration</code> from the current time, and also …",30,[[["duration",3]]]],[11,"signed_duration_since","","Subtracts another <code>NaiveTime</code> from the current time. …",30,[[["naivetime",3]],["duration",3]]],[11,"format_with_items","","Formats the time with the specified formatting items. …",30,[[],["delayedformat",3]]],[11,"format","","Formats the time with the specified format string. See …",30,[[],[["delayedformat",3],["strftimeitems",3]]]],[11,"new","tiberius::time","Construct a new <code>DateTime</code> instance.",31,[[]]],[11,"days","","Days since 1st of January, 1900 (including the negative …",31,[[]]],[11,"seconds_fragments","","1/300 of a second, so a value of 300 equals 1 second …",31,[[]]],[11,"new","","Construct a new <code>SmallDateTime</code> instance.",32,[[]]],[11,"days","","Days since 1st of January, 1900.",32,[[]]],[11,"seconds_fragments","","1/300 of a second, so a value of 300 equals 1 second …",32,[[]]],[11,"new","","Construct a new <code>Date</code>",33,[[],["date",3]]],[11,"days","","The number of days from 1st of January, year 1.",33,[[]]],[11,"new","","Construct a new <code>Time</code>",34,[[]]],[11,"increments","","Number of 10^-n second increments since midnight, where <code>n</code> …",34,[[]]],[11,"scale","","The accuracy of the increments.",34,[[]]],[11,"new","","Construct a new <code>DateTime2</code> from the date and time …",35,[[["time",3],["date",3]]]],[11,"date","","The date component.",35,[[],["date",3]]],[11,"time","","The time component.",35,[[],["time",3]]],[11,"new","","Construct a new <code>DateTimeOffset</code> from a <code>datetime2</code>, offset …",36,[[["datetime2",3]]]],[11,"datetime2","","The date and time part.",36,[[],["datetime2",3]]],[11,"offset","","Number of minutes from UTC.",36,[[]]],[11,"db_name","tiberius::xml","Specifies the name of the database where the schema …",37,[[]]],[11,"owner","","Specifies the name of the relational schema containing …",37,[[]]],[11,"collection","","Specifies the name of the XML schema collection to which …",37,[[]]],[11,"new","","Create a new XmlData with the given string. Validation of …",38,[[]]],[11,"schema","","Returns information about the schema of the XML file, if …",38,[[],[["xmlschema",3],["option",4]]]],[11,"into_string","","Takes the XML string out from the struct.",38,[[],["string",3]]],[11,"nil","tiberius","The \'nil UUID\'.",39,[[],["uuid",3]]],[11,"from_fields","","Creates a UUID from four field values in big-endian order.",39,[[],[["result",4],["error",3],["uuid",3]]]],[11,"from_fields_le","","Creates a UUID from four field values in little-endian …",39,[[],[["result",4],["error",3],["uuid",3]]]],[11,"from_u128","","Creates a UUID from a 128bit value in big-endian order.",39,[[],["uuid",3]]],[11,"from_u128_le","","Creates a UUID from a 128bit value in little-endian order.",39,[[],["uuid",3]]],[11,"from_slice","","Creates a UUID using the supplied big-endian bytes.",39,[[],[["result",4],["error",3],["uuid",3]]]],[11,"from_bytes","","Creates a UUID using the supplied big-endian bytes.",39,[[],["uuid",3]]],[11,"parse_str","","Parses a <code>Uuid</code> from a string of hexadecimal digits with …",39,[[],[["result",4],["error",3],["uuid",3]]]],[11,"to_hyphenated","","Get a <code>Hyphenated</code> formatter.",39,[[],["hyphenated",3]]],[11,"to_hyphenated_ref","","Get a borrowed <code>HyphenatedRef</code> formatter.",39,[[],["hyphenatedref",3]]],[11,"to_simple","","Get a <code>Simple</code> formatter.",39,[[],["simple",3]]],[11,"to_simple_ref","","Get a borrowed <code>SimpleRef</code> formatter.",39,[[],["simpleref",3]]],[11,"to_urn","","Get a <code>Urn</code> formatter.",39,[[],["urn",3]]],[11,"to_urn_ref","","Get a borrowed <code>UrnRef</code> formatter.",39,[[],["urnref",3]]],[11,"new_v1","","Create a new UUID (version 1) using a time value + …",39,[[["timestamp",3]],[["result",4],["error",3],["uuid",3]]]],[11,"to_timestamp","","Returns an optional <code>Timestamp</code> storing the timestamp and …",39,[[],[["timestamp",3],["option",4]]]],[11,"new_v3","","Creates a UUID using a name from a namespace, based on …",39,[[["uuid",3]],["uuid",3]]],[11,"new_v4","","Creates a random UUID.",39,[[],["uuid",3]]],[18,"NAMESPACE_DNS","","UUID namespace for Domain Name System (DNS).",39,null],[18,"NAMESPACE_OID","","UUID namespace for ISO Object Identifiers (OIDs).",39,null],[18,"NAMESPACE_URL","","UUID namespace for Uniform Resource Locators (URLs).",39,null],[18,"NAMESPACE_X500","","UUID namespace for X.500 Distinguished Names (DNs).",39,null],[11,"get_variant","","Returns the variant of the UUID structure.",39,[[],[["variant",4],["option",4]]]],[11,"get_version_num","","Returns the version number of the UUID.",39,[[]]],[11,"get_version","","Returns the version of the UUID.",39,[[],[["option",4],["version",4]]]],[11,"as_fields","","Returns the four field values of the UUID in big-endian …",39,[[]]],[11,"to_fields_le","","Returns the four field values of the UUID in …",39,[[]]],[11,"as_u128","","Returns a 128bit value containing the UUID data.",39,[[]]],[11,"to_u128_le","","Returns a 128bit little-endian value containing the UUID …",39,[[]]],[11,"as_bytes","","Returns an array of 16 octets containing the UUID data.",39,[[]]],[11,"is_nil","","Tests if the UUID is nil.",39,[[]]],[11,"encode_buffer","","A buffer that can be used for <code>encode_...</code> calls, that is …",39,[[]]]],"p":[[4,"IoErrorKind"],[4,"Error"],[13,"Io"],[13,"Routing"],[3,"TokenError"],[4,"Sign"],[4,"AuthMethod"],[8,"FromSql"],[8,"FromSqlOwned"],[4,"ColumnType"],[8,"SqlBrowser"],[4,"ColumnData"],[4,"EncryptionLevel"],[8,"IntoSql"],[8,"ToSql"],[3,"Config"],[3,"Client"],[3,"QueryResult"],[3,"ExecuteResult"],[3,"Column"],[3,"Row"],[3,"BigDecimal"],[3,"BigInt"],[3,"Decimal"],[3,"Numeric"],[3,"FixedOffset"],[3,"Utc"],[3,"DateTime"],[3,"NaiveDate"],[3,"NaiveDateTime"],[3,"NaiveTime"],[3,"DateTime"],[3,"SmallDateTime"],[3,"Date"],[3,"Time"],[3,"DateTime2"],[3,"DateTimeOffset"],[3,"XmlSchema"],[3,"XmlData"],[3,"Uuid"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);